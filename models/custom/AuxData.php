<?php
/**
 * Created by PhpStorm.
 * User: alpo
 * Date: 28.12.16
 * Time: 14:56
 */

namespace app\models\custom;


use app\models\Materials;
use app\models\Orders;
use app\models\Stocks;
use yii;
use yii\base\Model;


class AuxData extends Model
{

    public static function getUnits(){
        return array(
            'ШТ' => 'ШТ',
            'М' => 'М',
            'ПАР' => 'ПАР',
        );
    }    
    
    public static function getDirections(){
        return array(
            '0' => 'Расход',
            '1' => 'Приход',
        );
    }    
    public static function getMaterials(){
        $temp = Materials::find()
            ->select (['m_id' => 'id', 'value' => "concat (id, '; ', ref, '; ',name)"])
            ->asArray()
            ->all();
        return array_column($temp, 'value', 'm_id');
    }    
    
    public static function getStocks(){
        $temp = Stocks::find()
            ->select (['s_id' => 'id', 'value' => 'placename'])
            ->asArray()
            ->all();
        return array_column($temp, 'value', 's_id');
    }    
    
    public static function getOrderStatus(){
        return array(
            '0' => Yii::t('app', 'To do'),
            '1' => Yii::t('app', 'Out of date'),
            '2' => Yii::t('app', 'Placed'),
            '3' => Yii::t('app', 'Paid'),
            '4' => Yii::t('app', 'Arrived'),
            '5' => Yii::t('app', 'Completed'),
            '6' => Yii::t('app', 'Canceled'),
        );
    }

    /**
     * @return array|yii\db\ActiveRecord[]
     */
    public static function getUrgents ()
    {
        return Materials::find()
            ->where(['>=', '([[materials.minqty]] - [[materials.qty]])', 0])
            ->andWhere(['>', 'materials.minqty', 0])->joinWith(['orders'])
            ->all();

    }

    /**
     * @param array $urgents
     * @return array $updated_list
     */
    public static function updateUrgents ($urgents)
    {
        $two_weeks_ago = date ('Y-m-d', mktime(0, 0, 0, date("m"),   date("d") -14,   date("Y")));
        $updated_list = array();
        foreach ($urgents as $urgent){
            if (!$urgent['orders']){
                $updated_list[] = self::createNewOrder($urgent);
            }else{
                foreach($urgent['orders'] as $order_to_update){
                    $to_update = Orders::findOne(['id' => $order_to_update->id]);
                    if ($order_to_update->status <2){
                        if ($to_update->attributes['updated'] < $two_weeks_ago){
                            $to_update->setAttributes([
                                'updated' => date ('Y-m-d'),
                                'status' => 1,
                                ]);
                            $updated_list[] = [
                                $to_update->materials->ref,
                                $to_update->materials->name,
                                $to_update->materials->qty,
                                $to_update->materials->unit,
                                $to_update->materials->type,
                                $to_update->materials->gruppa,
                                self::getOrderStatus()[$to_update->status],
                            ];
                            $to_update->save();
                        }
                    }
                };
            }
        }
        return $updated_list;
    }
    
    public static function createNewOrder($item){
        $new_order = new Orders();
        $new_order->materials_id = $item->id;
        $new_order->setAttributes([
            'materials_id' => $item->id,
            'qty' => $item->minqty,
            'order_date' => date ('Y-m-d'),
            'status' => 0,
            'person' => Yii::t('app', 'Generated by system'),
            'docref' => NULL,
            'updated' => date ('Y-m-d'),
        ]);
        $update_list = [
            $new_order->materials->ref,
            $new_order->materials->name,
            $new_order->materials->qty,
            $new_order->materials->unit,
            $new_order->materials->type,
            $new_order->materials->gruppa,
            self::getOrderStatus()[$new_order->status],
            ];
            $new_order->save();
            return $update_list;
    }
}